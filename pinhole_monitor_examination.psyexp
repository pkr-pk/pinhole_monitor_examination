<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2020.2.4">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data file delimiter" updates="None" val="auto" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'participant': '', 'session': '001'}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="HTML path" updates="None" val="" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Resources" updates="None" val="[]" valType="fileList"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="2" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="height" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="[2560, 1600]" valType="code"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="$[0,0,0]" valType="str"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="expName" updates="None" val="pinhole_monitor_examination" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
  </Settings>
  <Routines>
    <Routine name="code_2">
      <ImageComponent name="image_1">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="img/IMG.jpg" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="image_1" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="key_response">
        <Param name="allowedKeys" updates="constant" val="'b','f'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_response" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="all keys" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="show = &quot;Welcome&quot;;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;if (_pj.in_es6(&quot;y&quot;, key_response.keys)) {&amp;#10;    show = &quot;Clicked yes&quot;;&amp;#10;} else {&amp;#10;    show = &quot;Clicked yes&quot;;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="thisExp.addData('Front_Boundary', FP)&amp;#10;thisExp.addData('Backward_Boundary', BP)&amp;#10;thisExp.addData('Object_Position', OP)&amp;#10;thisExp.addData('Percent', (BP - FP) / (Backward - Front))&amp;#10;thisExp.addData('Omega', np.rad2deg(abs(d * OP) / l ** 2) * 60)" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# Adding choosed button to results list&amp;#10;letter = key_response.keys[-1]&amp;#10;obj_positions[-1].append(letter)&amp;#10;&amp;#10;# Adding data to excel file&amp;#10;trials.addData('Front_Boundary', FP)&amp;#10;trials.addData('Backward_Boundary', BP)&amp;#10;trials.addData('Object_Position', OP)&amp;#10;trials.addData('Percent', (BP - FP) / (Backward - Front))&amp;#10;trials.addData('Choosed_Position', letter)&amp;#10;trials.addData('Omega', np.rad2deg(abs(d * OP) / l**2) * 60)&amp;#10;&amp;#10;# Handling normal situation&amp;#10;if control_f != 2 or control_b != 2:&amp;#10;    if &quot;b&quot; in key_response.keys[-1]:&amp;#10;        BP = OP&amp;#10;        control_b += 1&amp;#10;        control_f = 0&amp;#10;    elif &quot;f&quot; in key_response.keys[-1]:&amp;#10;        FP = OP&amp;#10;        control_f += 1&amp;#10;        control_b = 0&amp;#10;&amp;#10;# Handling checking point after two same observer responses&amp;#10;if checking_point:&amp;#10;    # Handling situation when checking point occurs before three steps&amp;#10;    if &quot;f&quot; in key_response.keys[-1] and OP &lt; 0:&amp;#10;        check = True&amp;#10;    elif &quot;b&quot; in key_response.keys[-1] and OP &gt; 0:&amp;#10;        check = True&amp;#10;    else:&amp;#10;        check = False&amp;#10;&amp;#10;    # Handling situation when checking point occurs after two steps&amp;#10;    for point in reversed(obj_positions[:-2]):&amp;#10;        if point[0] != point[2]:&amp;#10;            if point[1] == OP and point[3] == letter:&amp;#10;                check = True&amp;#10;                break&amp;#10;            elif point[1] == OP and point[3] != letter:&amp;#10;                check = False&amp;#10;                break&amp;#10;&amp;#10;    # Points assigment&amp;#10;    if check:&amp;#10;        if obj_positions[-2][3] == 'f':&amp;#10;            BP = obj_positions[-2][0]&amp;#10;            FP = obj_positions[-2][1]&amp;#10;        else:&amp;#10;            BP = obj_positions[-2][1]&amp;#10;            FP = obj_positions[-2][2]&amp;#10;    else:&amp;#10;        BP = obj_positions[-3][0]&amp;#10;        FP = obj_positions[-3][2]&amp;#10;&amp;#10;    control_f = 0&amp;#10;    control_b = 0&amp;#10;    checking_point = False&amp;#10;&amp;#10;# Adding checking point indicator&amp;#10;if control_f == 2:&amp;#10;    FP = BP&amp;#10;    checking_point = True&amp;#10;elif control_b == 2:&amp;#10;    BP = FP&amp;#10;    checking_point = True&amp;#10;&amp;#10;# Adding end loop indicator if there are two the same checking points in a row&amp;#10;if len(obj_positions) &gt;= 6:&amp;#10;    if obj_positions[-1][1] == obj_positions[-4][1] and \&amp;#10;            obj_positions[-1][3] == obj_positions[-4][3] and \&amp;#10;            obj_positions[-1][0] == obj_positions[-1][2]:&amp;#10;        loop_end = True&amp;#10;&amp;#10;# Points calculation and drawing plot&amp;#10;OP = (FP + BP) / 2&amp;#10;image_reconstruction(OP, 0.01, h, 0.004, 71e-6, p, resolution, alignment, recon_path)&amp;#10;point_position += 1&amp;#10;obj_positions.append([BP, OP, FP])&amp;#10;key_response.keys.pop()&amp;#10;&amp;#10;if obj_positions[-1][0] == obj_positions[-1][1]:&amp;#10;    ax.scatter([point_position, point_position, point_position],&amp;#10;               obj_positions[-1], c=['r', 'r', 'r'])&amp;#10;else:&amp;#10;    ax.scatter([point_position, point_position, point_position],&amp;#10;               obj_positions[-1], c=['b', 'r', 'b'])&amp;#10;    ax.vlines(x=point_position, ymin=obj_positions[-1][2],&amp;#10;              ymax=obj_positions[-1][0])&amp;#10;&amp;#10;ax.text(x=point_position - 1, y=obj_positions[-2][1], s=letter, fontsize=20)&amp;#10;ax.hlines(y=0, xmin=-1, xmax=point_position + 1)&amp;#10;# fig.canvas.draw()&amp;#10;&amp;#10;# Trial ending&amp;#10;if trials_finised:&amp;#10;    trials.finished = True&amp;#10;&amp;#10;# Loop ending if conditions were met&amp;#10;if BP != FP and ((BP - FP) / (Backward - Front)) &lt; 0.05:&amp;#10;    plt.savefig(filename + '.jpg')&amp;#10;    trials.finished = True&amp;#10;elif loop_end:&amp;#10;    plt.savefig(filename + '.jpg')&amp;#10;    trials_finised = True&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="WelcomeScreen">
      <TextComponent name="welcome_text">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="welcome_text" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Start of the alignment" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="EndScreen">
      <TextComponent name="text">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="text" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="End of the examination" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_2">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="aligment">
      <ImageComponent name="aligment_image">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="img/IMG.jpg" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="aligment_image" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="aligment_keys">
        <Param name="allowedKeys" updates="constant" val="'left','right','space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="aligment_keys" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="all keys" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="aligment_code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="import matplotlib.pyplot as plt&amp;#10;import numpy as np&amp;#10;from PIL import Image&amp;#10;&amp;#10;p = 17    # pixels per pinhole&amp;#10;d = 0.055  # interpupilary distance&amp;#10;l = 1&amp;#10;&amp;#10;Backward = 0.03&amp;#10;Front = -0.06&amp;#10;h = 0.005&amp;#10;OP = (Backward + Front) / 2&amp;#10;alignment = 0&amp;#10;&amp;#10;control_b = 0&amp;#10;control_f = 0&amp;#10;checking_point = False&amp;#10;loop_end = False&amp;#10;trials_finised = False&amp;#10;&amp;#10;recon_path = 'C:/Users/PK/Desktop/PsychoPy/img'&amp;#10;resolution = 1600, 2560  # tablet resolution&amp;#10;&amp;#10;def object_positions(z, y, h, g, p_s, p, resolution_0):&amp;#10;    # all data in meters except parameter p&amp;#10;    # z   - object position in z&amp;#10;    # y   - object position in y&amp;#10;    # h   - object thickness&amp;#10;    # g   - gap between tablet and pinhole array&amp;#10;    # p_s - pixel size&amp;#10;    # p   - pixels per pinhole&amp;#10;&amp;#10;    if z == 0:&amp;#10;        z += 0.000001&amp;#10;&amp;#10;    z /= p_s&amp;#10;    y /= p_s&amp;#10;    h /= p_s * 2&amp;#10;    g /= -p_s&amp;#10;    p /= 2&amp;#10;&amp;#10;    number_of_iteration = resolution_0 / (p * 2)&amp;#10;    pinhole_position = -(resolution_0 / 2) - p&amp;#10;&amp;#10;    positions = []&amp;#10;    for i in range(int(number_of_iteration)):&amp;#10;        pinhole_position += 2 * p&amp;#10;        y_position_1 = ((y + h - pinhole_position) * g / z) + pinhole_position&amp;#10;        y_position_2 = ((y - h - pinhole_position) * g / z) + pinhole_position&amp;#10;&amp;#10;        if y_position_1 &lt; pinhole_position - p:&amp;#10;            y_position_1 = pinhole_position - p&amp;#10;        elif y_position_1 &gt; pinhole_position + p:&amp;#10;            y_position_1 = pinhole_position + p&amp;#10;&amp;#10;        if y_position_2 &lt; pinhole_position - p:&amp;#10;            y_position_2 = pinhole_position - p&amp;#10;        elif y_position_2 &gt; pinhole_position + p:&amp;#10;            y_position_2 = pinhole_position + p&amp;#10;&amp;#10;        y_position_1 = 2 * pinhole_position - y_position_1&amp;#10;        y_position_2 = 2 * pinhole_position - y_position_2&amp;#10;&amp;#10;        y_position_1 += number_of_iteration * p&amp;#10;        y_position_2 += number_of_iteration * p&amp;#10;&amp;#10;        y_position_1 = int(y_position_1)&amp;#10;        y_position_2 = int(y_position_2)&amp;#10;&amp;#10;        positions.append(sorted((y_position_1, y_position_2)))&amp;#10;&amp;#10;    return positions&amp;#10;&amp;#10;&amp;#10;def object_width(object_positions, resolution):&amp;#10;    maximium = 0&amp;#10;    minimum = resolution[1]&amp;#10;    for positions in object_positions:&amp;#10;        if positions[0] != positions[1]:&amp;#10;            if max(positions) &gt; maximium:&amp;#10;                maximium = max(positions)&amp;#10;            if min(positions) &lt; minimum:&amp;#10;                minimum = min(positions)&amp;#10;&amp;#10;    return minimum, maximium, maximium - minimum&amp;#10;&amp;#10;&amp;#10;def image_reconstruction(z, y, h, g, p_s, p, resolution, alignment, recon_path):&amp;#10;    object_positions_1 = object_positions(0, -y, h, g, p_s, p, resolution[1])&amp;#10;    object_positions_2 = object_positions(z, y, h, g, p_s, p, resolution[1])&amp;#10;&amp;#10;    image = np.zeros(resolution)&amp;#10;&amp;#10;    for positions in object_positions_1:&amp;#10;        image[:, positions[0]:positions[1]] = 255&amp;#10;&amp;#10;    for positions in object_positions_2:&amp;#10;        image[:, positions[0]:positions[1]] = 255&amp;#10;&amp;#10;    object_width_1 = object_width(object_positions_1, resolution)&amp;#10;    object_width_2 = object_width(object_positions_2, resolution)&amp;#10;    edge = int((object_width_2[2] - object_width_1[2]) / 2)&amp;#10;&amp;#10;    if z &gt; 0:&amp;#10;        slope = 1&amp;#10;        intensity = edge&amp;#10;    elif edge &gt; 0:&amp;#10;        slope = int(255 / edge)&amp;#10;        intensity = 255&amp;#10;&amp;#10;    if edge != 0:&amp;#10;        for j in range(edge):&amp;#10;            intensity -= slope&amp;#10;            if intensity &lt; 0:&amp;#10;                intensity = 0&amp;#10;            image[:, object_width_1[0] - j - 1:object_width_1[0] - j] = intensity&amp;#10;            image[:, object_width_1[1] + j:object_width_1[1] + j + 1] = intensity&amp;#10;    &amp;#10;    ali_array = np.zeros((resolution[0], abs(alignment)))&amp;#10;    &amp;#10;    if alignment &gt; 0:&amp;#10;        image = np.concatenate((ali_array, image), axis=1)&amp;#10;        image = image[:, :-alignment]&amp;#10;    else:&amp;#10;        image = np.concatenate((image, ali_array), axis=1)&amp;#10;        image = image[:, abs(alignment):]&amp;#10;&amp;#10;    final = Image.fromarray(np.uint8(image))&amp;#10;    final = final.convert('RGB')&amp;#10;    final.save(f&quot;{recon_path}&quot; + f'/IMG.jpg')&amp;#10;&amp;#10;&amp;#10;image_reconstruction(0.025, 0.01, h, 0.004, 71e-6, p, resolution, alignment, recon_path)" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="if 'left' in aligment_keys.keys[-1]:&amp;#10;    alignment -= 1&amp;#10;elif 'right' in aligment_keys.keys[-1]:&amp;#10;    alignment += 1&amp;#10;elif 'space' in aligment_keys.keys[-1]:&amp;#10;    aligment_loop.finished = True&amp;#10;    &amp;#10;aligment_keys.keys.pop()&amp;#10;image_reconstruction(0.025, 0.01, h, 0.004, 71e-6, p, resolution, alignment, recon_path)&amp;#10;&amp;#10;if aligment_loop.finished:&amp;#10;    image_reconstruction(0, 0.01, h, 0.004, 71e-6, p, resolution, alignment, recon_path)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="aligment_code" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Middle_screen">
      <TextComponent name="middle_text">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="middle_text" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Start of the examination" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="middle_key">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="middle_key" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="random_choice">
      <ImageComponent name="random_choice_image">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="img/IMG.jpg" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="random_choice_image" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="random_choice_keys">
        <Param name="allowedKeys" updates="constant" val="'f', 'b'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="random_choice_keys" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="random_choice_code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="if &quot;f&quot; in random_choice_keys.keys[-1]:&amp;#10;    BP = Backward&amp;#10;    FP = Front&amp;#10;elif &quot;b&quot; in random_choice_keys.keys[-1]:&amp;#10;    BP = -Front&amp;#10;    FP = -Backward&amp;#10;   &amp;#10;OP = (BP + FP) / 2&amp;#10;image_reconstruction(OP, 0.01, h, 0.004, 71e-6, p, resolution, alignment, recon_path)&amp;#10;&amp;#10;obj_positions = []&amp;#10;obj_positions.append([BP, OP, FP])&amp;#10;&amp;#10;plt.ion()&amp;#10;fig, ax = plt.subplots()&amp;#10;figManager = plt.get_current_fig_manager()&amp;#10;figManager.window.move(0, 0)&amp;#10;point_position = 0&amp;#10;plot = ax.scatter([point_position, point_position, point_position], obj_positions[0],&amp;#10;                  c=['b', 'r', 'b'])&amp;#10;ax.set_ylim((FP - 0.01, BP + 0.01))&amp;#10;ax.hlines(y=0, xmin=-1, xmax=point_position + 1)&amp;#10;ax.vlines(x=point_position, ymin=obj_positions[-1][2], ymax=obj_positions[-1][0])&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="random_choice_code" valType="code"/>
      </CodeComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="WelcomeScreen"/>
    <LoopInitiator loopType="TrialHandler" name="aligment_loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="9999" valType="code"/>
      <Param name="name" updates="None" val="aligment_loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="aligment"/>
    <LoopTerminator name="aligment_loop"/>
    <Routine name="Middle_screen"/>
    <Routine name="random_choice"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="9999" valType="code"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="code_2"/>
    <LoopTerminator name="trials"/>
    <Routine name="EndScreen"/>
  </Flow>
</PsychoPy2experiment>
